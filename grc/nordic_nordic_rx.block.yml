id: nordic_nordic_rx
label: nordic rx
category: '[Nordic]'
templates:
  imports: import nordic
  make: nordic.nordic_rx(${channel}, ${address_length}, ${crc_length}, ${data_rate}, ${address_match})
parameters:
- id: channel
  label: Channel
  default: '0'
  dtype: int
- id: address_length
  label: Address Length
  default: '5'
  dtype: int
- id: crc_length
  label: CRC Length
  default: '2'
  dtype: int
- id: data_rate
  label: Data Rate
  default: '0'
  dtype: enum
  options: ['0', '1', '2']
  option_labels: ['250kbps', '1mbps', '2mbps']
  option_attributes:
    dtype: [int, int, int]
- id: address_match
  label: Address Match List
  default: ''
  dtype: string
inputs:
- label: in
  domain: stream
  dtype: byte
outputs:
- label: nordictap_out
  domain: message
documentation: |-
    Nordic receiver:
    Channel:
    The channel argument is mainly informational and tags data packets with
    this value for downstream usage (e.g. Wireshark).

    Address_length:
    Specifies how many bytes within the packet header are for the address. The
    Nordic protocol specifies this can be 3, 4, or 5 bytes long. The most
    common (and default value) is 5.

    Crc_length:
    Specifies how many CRC bytes are used within the packet. This implementation
    only properly supports 16-bit CRC for now. Most (all?) NRF implementations
    use 16-bit CRC. The most common (and default value) is 2. 

    Data_rate:
    The data rate argument is mainly for informational purposes and tags data
    packets for downstream usage (e.g. Wireshark).

    Address_match:
    An optional argument which indicates a list of addresses to search for
    instead of solely relying on CRC and preamble to identify packets. This is
    useful if the addresses are known and you would like to know if packets are
    being dropped due to CRC errors. The input format for this argument is a 
    comma separated list of addresses in hex form. Addresses need not be fully
    specified, the match will identify packets based on the length of address
    provided. Use caution, a very short match (1-2 bytes) will likely match
    noise and cause very verbose output.

    Usage example: 
        Address_match: E4A0F1EE,E4A0F1EF,BA87FE
        Will match addresses starting with any of the following:
            0xE4 0xA0 0xF1 0xEE
            0xE4 0xA0 0xF1 0xEF
            0xBA 0x87 0xFE
file_format: 1
